Approach 1: With extra space

void mergeArrays(int arr1[], int arr2[], int n1,
                             int n2, int arr3[])
{
    int i = 0, j = 0, k = 0;
 
    // Traverse both array
    while (i<n1 && j <n2)
    {
        // Check if current element of first
        // array is smaller than current element
        // of second array. If yes, store first
        // array element and increment first array
        // index. Otherwise do same with second array
        if (arr1[i] < arr2[j])
            arr3[k++] = arr1[i++];
        else
            arr3[k++] = arr2[j++];
    }
 
    // Store remaining elements of first array
    while (i < n1)
        arr3[k++] = arr1[i++];
 
    // Store remaining elements of second array
    while (j < n2)
        arr3[k++] = arr2[j++];
}

Approach 2: Without extra space

Initialize two pointers
left = m-1
right = 0

Now iterate both the arrays and swap values on pointers if arr[l]>arr[r]
Sort both arrays
Merge second array in its desired location

void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int l=m-1;
        int r=0;
        while(l>=0 && r<n){
            cout<<nums1[l]<<" "<<nums2[r]<<endl;
            if(nums1[l]>nums2[r]){
                swap(nums1[l],nums2[r]);
                l--,r++;
            }
            else break;
        }
        sort(nums1.begin(),nums1.begin()+m);
        sort(nums2.begin(),nums2.end());
        for(int i=0;i<n;i++){
            nums1[m+i]=nums2[i];
        }
    }
