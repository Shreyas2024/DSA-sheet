Approach 1: Sorting

Pair getMinMax(int arr[], int n)
{
    Pair minmax;
 
    sort(arr, arr + n);
 
    minmax.min = arr[0];
    minmax.max = arr[n - 1];
 
    return minmax;
}

Approach 2: Linear Search

void getminmax(int a[],int n){
    int min = INT_MAX, max = INT_MIN;
    for(int i=0;i<n;i++){
        if(a[i]>max) max = a[i];
        if(a[i]<min) min = a[i];
    }
    cout<<min<<" "<<max<<endl;
}

Approach 3: Tournament Method

struct Pair getMinMax(int arr[], int low, int high)
{
    struct Pair minmax, mml, mmr;
    int mid;
 
    // If there is only one element
    if (low == high) {
        minmax.max = arr[low];
        minmax.min = arr[low];
        return minmax;
    }
 
    // If there are two elements
    if (high == low + 1) {
        if (arr[low] > arr[high]) {
            minmax.max = arr[low];
            minmax.min = arr[high];
        }
        else {
            minmax.max = arr[high];
            minmax.min = arr[low];
        }
        return minmax;
    }
 
    // If there are more than 2 elements
    mid = (low + high) / 2;
    mml = getMinMax(arr, low, mid);
    mmr = getMinMax(arr, mid + 1, high);
 
    // Compare minimums of two parts
    if (mml.min < mmr.min)
        minmax.min = mml.min;
    else
        minmax.min = mmr.min;
 
    // Compare maximums of two parts
    if (mml.max > mmr.max)
        minmax.max = mml.max;
    else
        minmax.max = mmr.max;
 
    return minmax;
}
